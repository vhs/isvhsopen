#!/usr/bin/env node

/**
 * Module dependencies.
 */

const appPromise = require('../app')
const debug = require('debug')('isvhsopen:server')
const http = require('http')
const slack = require('../controller/slack')

/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = (val) => {
  const port = parseInt(val)

  if (isNaN(port)) {
  // named pipe
    return val
  }

  if (port >= 0) {
  // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = (server) => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port

  debug('Listening on ' + bind)
}

/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error, port) => {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges')
    process.exit(1)
    // eslint-disable-next-line no-unreachable
    break
  case 'EADDRINUSE':
    console.error(bind + ' is already in use')
    process.exit(1)
    // eslint-disable-next-line no-unreachable
    break
  default:
    throw error
  }
}

appPromise.setup().then((app) => {
/**
 * Get port from environment and store in Express.
 */
  const port = normalizePort(process.env.PORT || '3000')

  app.set('port', port)

  /**
 * Create HTTP server.
 */
  const server = http.createServer(app)

  /**
 * Listen on provided port, on all network interfaces.
 */
  server.listen(port)
  server.on('error', (error) => onError(error, port))
  server.on('listening', () => onListening(server))

  slack.setup()
})
